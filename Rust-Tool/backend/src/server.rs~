use actix_web::{web, App, HttpServer};
use std::{env, io::Result};
use dotenv::dotenv;
use crate::utils::postgre_sql;

pub async fn _server() -> Result<()> {
    dotenv().ok();

    let pool = postgre_sql::local_db()
        .await
        .expect("Failed to connect to the database");

    println!("DB Connect Successfully");

    let host : String = env::var("HOST")
        .expect("HOST must be set");

    let port: u16 = env::var("PORT")
        .unwrap_or_else(|_| "5000".to_string())
        .parse()
        .expect("PORT must be set");

    println!("http://{host}:{port}");

    HttpServer::new(move|| {
        App::new()
            .app_data(web::Data::new(pool.clone()))
            .service(web::scope("/")
                .service(web::resource("/register/{}"))
                .service(web::resource("/signin/{}"))
            )
    })
        .bind((host.as_str(), port))?
        .run()
        .await
}